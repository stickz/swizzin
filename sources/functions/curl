#!/bin/bash
# Upgrade curl to bypass the bug in Debian 10. Can be used on any system however, but the benefit is to Buster users most

configure_curl() {
    # pipe optimizations for 2048MB plus memory
    # only required for c-ares due to high memory consumption
    memory=$(awk '/MemAvailable/ {printf( "%.f\n", $2 / 1024 )}' /proc/meminfo)
    if [[ $memory > 2048 ]]; then
        export curlpipe="-pipe"
    else
        export curlpipe=""
    fi
    # link time optimizations for 2 plus threads
    # Only required for curl due to high cpu usage
    if [ $(nproc) -ge 2 ]; then
        export curlflto="-flto=$(nproc)"
    else
        export curlflto=""
    fi
}

build_cares() {
    cd /tmp

    . /etc/swizzin/sources/functions/utils
    cares_latest=$(github_latest_version c-ares/c-ares)
    cares_tar=${cares_latest/cares/c-ares}

    wget -q -O /tmp/cares.tar.gz https://github.com/c-ares/c-ares/releases/download/${cares_latest}/${cares_tar//_/.}.tar.gz > ${log} 2>&1 || {
        echo_error "There was an error downloading c-ares! Please check the log for more info"
        rm /tmp/cares.tar.gz >> $log 2>&1
        exit 1
    }

    mkdir -p /tmp/cares
    tar -xzf /tmp/cares.tar.gz -C /tmp/cares --strip-components=1 >> $log 2>&1
    rm /tmp/cares.tar.gz

    cd /tmp/cares
    ./configure --prefix=/usr --disable-shared --disable-debug >> ${log} 2>&1 || {
        echo_error "There was an error configuring c-ares! Please check the log for more info"
        cd /tmp
        rm -rf /tmp/cares >> $log 2>&1
        exit 1
    }
    make -j$(nproc) CFLAGS="-w -O2 -flto ${curlpipe}" >> ${log} 2>&1 || {
        echo_error "There was an error compiling c-ares! Please check the log for more info"
        cd /tmp
        rm -rf /tmp/cares >> $log 2>&1
        exit 1
    }
    make install >> ${log} 2>&1 >> $log 2>&1

    cd /tmp
    rm -rf /tmp/cares >> $log 2>&1
}

build_curl() {
    cd /tmp

    wget -q -O /tmp/curl.zip https://salsa.debian.org/debian/curl/-/archive/debian/bullseye-backports/curl-debian-bullseye-backports.zip >> ${log} 2>&1 || {
        echo_error "There was an error downloading curl! Please check the log for more info"
        rm /tmp/curl.zip >> $log 2>&1
        exit 1
    }

    unzip -q /tmp/curl.zip -d /tmp >> $log 2>&1
    rm /tmp/curl.zip

    apt_install libssl-dev libnghttp2-dev libzstd-dev libldap2-dev libssh2-1-dev librtmp-dev libpsl-dev

    cd /tmp/curl-debian-bullseye-backports
    ./configure --with-openssl --with-zlib --with-zstd --with-libssh2 --with-nghttp2 --with-librtmp --with-libpsl \
        --enable-ares --enable-ldap --enable-ldaps --enable-websockets --disable-shared --disable-debug >> ${log} 2>&1 || {
        echo_error "There was an error configuring curl! Please check the log for more info"
        cd /tmp
        rm -rf /tmp/curl-* >> $log 2>&1
        exit 1
    }
    make -j$(nproc) CFLAGS="-w -O2 ${curlflto} -pipe" >> ${log} 2>&1 || {
        echo_error "There was an error compiling curl! Please check the log for more info"
        cd /tmp
        rm -rf /tmp/curl-* >> $log 2>&1
        exit 1
    }
    make install >> ${log} 2>&1 >> $log 2>&1

    cd /tmp
    rm -rf /tmp/curl-* >> $log 2>&1

    ldconfig /usr/local/bin
    ldconfig /usr/local/lib
}
